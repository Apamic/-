<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.movev.springbootdatajdbc.mapper.DepartmentMapper">
    <cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024" ></cache>
    <!--
        eviction:缓存的回购策略：
            LRU -  最近最少使用的：移除最长时间不被使用的对象。
            FIFO - 先进先出：按对象进入缓存的顺序来移除他们。
            SOFT - 软引用：移除基于垃圾回收器状态发软引用规则的对象。
            WEAK - 弱引用：更积极的移除基于垃圾收集器状态和弱应用规则的对象。
            默认的是LRU。

        flushInterval: 缓存刷新间隔
            缓存多长时间清空一次，默认不清空，设置一个毫秒值
        readOnly:是否只读
            TRUE 只读；mybatis认为所有从缓存中获取数据的操作都是只读，不会修改数据。
                        mybatis为了加快获取速度,直接就会将数据在缓存中的应用交给用户。不安全，熟读快
            FALSE 非只读；mybatis觉得获取的数据可能会被修改。
                        mybatis会利用序列化&反序列的克隆一份新的数据给你。安全，熟读慢
        size:缓存存放多少元素；
        type:指定自定义缓存的全类名；
              实现Cache接口即可；
    -->


    <!--public Department getDeptById(Integer id);-->
    <select id="getDeptById" resultType="com.movev.springbootdatajdbc.bean.Department">
        select * from
            department
        where
            id=#{id}
    </select>


    <!--查询部门的时候将部门对应的所有员工信息也查询出来-->
    <!--collection嵌套结果集的方式，定义关联的集合类型的封装规则-->
    <resultMap id="MyDept" type="com.movev.springbootdatajdbc.bean.Department">
        <id column="did" property="id"/>
        <result column="departmentName" property="departmentName"/>
        <!--
            collection:定义集合类型的属性封装
            ofType:指定集合里面元素的类型
        -->
        <collection property="employeeList" ofType="com.movev.springbootdatajdbc.bean.Employee">
            <!--定义这个集合中元素的封装规则-->
            <id column="eid" property="id"/>
            <result column="lastName" property="lastName"/>
            <result column="email" property="email"/>
            <result column="gender" property="gender"/>
        </collection>
    </resultMap>


    <!--public Department getDeptByIdPlus(Integer id);-->
    <select id="getDeptByIdPlus" resultMap="MyDept">
        SELECT d.id id,d.departmentName departmentName,
            e.id eid,e.lastName lastName,e.email email,e.gender gender,e.d_id did
        FROM department d LEFT JOIN employee e
        ON d.id = e.d_id
        WHERE d.id = #{id}
    </select>



    <resultMap id="MyDeptStep" type="com.movev.springbootdatajdbc.bean.Department">
        <id column="id" property="id"/>
        <result column="departmentName" property="departmentName"/>
        <collection property="employeeList" select="com.movev.springbootdatajdbc.mapper.EmployeeMapper.getEmpsByDeptId"
            column="{deptId = id}" fetchType="lazy">
        </collection>
    </resultMap>
    <!--public Department getDeptByIdStep(Integer id);-->
    <select id="getDeptByIdStep" resultType="com.movev.springbootdatajdbc.bean.Department">
        select *
        from department
        where id = #{id}
    </select>

    <!--
        多列的值传递:
        将列值封装Map传递：column{key=val,key2=val2}
        fetchType:延时加载
             lazy 延时
             eager 立即
        -->
</mapper>